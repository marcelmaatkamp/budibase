#!/bin/bash

# --------------
# create cluster
# --------------

cat <<EOF | kind create cluster --config=-
---
kind: Cluster
apiVersion: kind.x-k8s.io/v1alpha4
nodes:
- role: control-plane
  kubeadmConfigPatches:
  - |
    kind: InitConfiguration
    nodeRegistration:
      kubeletExtraArgs:
        node-labels: "ingress-ready=true"
  extraPortMappings:
  - containerPort: 80
    hostPort: 80
    protocol: TCP
  - containerPort: 443
    hostPort: 443
    protocol: TCP
  - containerPort: 30100
    hostPort: 30100
  - containerPort: 30101
    hostPort: 30101
  - containerPort: 30102
    hostPort: 30102
- role: worker
- role: worker
- role: worker
EOF

# ----------------
# create namespace
# ----------------

kubectl create namespace traefik

# --------------
# create metallb
# --------------

DOCKER_KIND_SUBNET=$(docker network inspect kind -f "{{(index .IPAM.Config 0).Subnet}}" | cut -d '.' -f1,2) &&\
kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.10.2/manifests/namespace.yaml &&\
cm=$(kubectl apply -f - <<EOF
---
apiVersion: v1
kind: ConfigMap
metadata:
  namespace: metallb-system
  name: config
data:
  config: |
    address-pools:
    - name: default
      protocol: layer2
      addresses:
      - $DOCKER_KIND_SUBNET.255.1-$DOCKER_KIND_SUBNET.255.250
EOF
  ) &&\
kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.10.2/manifests/metallb.yaml &&\
kubectl create secret generic -n metallb-system memberlist --from-literal=secretkey="$(openssl rand -base64 128)"  

# --------------
# create traefik
# --------------

  kubectl apply -f - <<EOF
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: traefik-config
  namespace: traefik
data:
  traefik-config.yaml: |
    http:
      middlewares:
        headers-default:
          headers:
            sslRedirect: true
            browserXssFilter: true
            contentTypeNosniff: true
            forceSTSHeader: true
            stsIncludeSubdomains: true
            stsPreload: true
            stsSeconds: 15552000
            customFrameOptionsValue: SAMEORIGIN
EOF

  cat <<EOF > traefik-chart-values.yaml
additionalArguments:
  - --providers.file.filename=/data/traefik-config.yaml
  - --entrypoints.websecure.http.tls.certresolver=cloudflare
  - --entrypoints.websecure.http.tls.domains[0].main=example.com
  - --entrypoints.websecure.http.tls.domains[0].sans=*.example.com
ports:
  web:
    redirectTo: websecure
ingressRoute:
  dashboard:
    enabled: false
persistence:
  enabled: true
  path: /certs
  size: 128Mi
volumes:
  - mountPath: /data
    name: traefik-config
    type: configMap
EOF

  helm repo add traefik https://helm.traefik.io/traefik &&\
  helm repo update &&\
  helm install traefik traefik/traefik --namespace=traefik --values=traefik-chart-values.yaml

# ------------------------
# create traefik dashboard
# ------------------------

username=admin &&\
password=password &&\
decoded_username_passwd=$(docker run --rm marcnuri/htpasswd -nb ${username} ${password} | openssl base64) &&\
kubectl apply -f - <<EOF
---
apiVersion: v1
kind: Secret
metadata:
  name: traefik-dashboard-auth
  namespace: traefik
data:
  users: |2
    ${decoded_username_passwd}
---
apiVersion: traefik.containo.us/v1alpha1
kind: Middleware
metadata:
  name: traefik-dashboard-basicauth
  namespace: traefik
spec:
  basicAuth:
    secret: traefik-dashboard-auth
---
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  name: traefik-dashboard
  namespace: traefik
spec:
  entryPoints:
    - websecure
  routes:
    - match: Host("traefik.example.com")
      kind: Rule
      middlewares:
        - name: traefik-dashboard-basicauth
          namespace: traefik
      services:
        - name: api@internal
          kind: TraefikService
EOF
  kubectl apply -f - <<EOF
---
apiVersion: v1
kind: Service
metadata:
  name: traefik-web-ui
spec:
  selector:
    k8s-app: traefik-ingress-lb
  ports:
  - port: 80
    targetPort: 8080
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: traefik-web-ui
  annotations:
    kubernetes.io/ingress.class: traefik
spec:
  rules:
   - host: traefik.example.com
     http:
      paths:
       - path: /
         pathType: Prefix
         backend:
          service:
           name: traefik-web-ui
           port:
            number: 80
EOF

# -----------------------
# create static webserver
# -----------------------

kubectl create deployment web --image=nginx &&\
kubectl expose deployment web --port=80 &&\
kubectl apply -f - <<EOF
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ingress-test
  annotations:
    kubernetes.io/ingress.class: traefik
spec:
  rules:
    - host: static.example.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: web
                port:
                  number: 80
EOF

# LB=$(kubectl get svc -n traefik traefik -o jsonpath='{.status.loadBalancer.ingress[0].ip}' )
# curl -k -H "Host: www.example.com" https://${LB}
# curl -k -H "Host: traefik.example.com" https://${LB}

# -------------------------
# set environment variables
# -------------------------

BUDIBASE_NS=budibase &&\
source hosting.properties

# ----------------
# create namespace
# ----------------

kubectl create namespace ${BUDIBASE_NS}

# -------------
# install redis
# -------------
# installation values for redis can be found at
#  - https://github.com/bitnami/charts/blob/master/bitnami/redis/values.yaml

helm repo add bitnami https://charts.bitnami.com/bitnami &&\
helm repo update &&\
helm install \
 --namespace ${BUDIBASE_NS} \
 --set auth.password=${REDIS_PASSWORD} \
  budibase-redis bitnami/redis

# ---------------
# install couchdb
# ---------------
# installation values for couchdb can be found at
#  - https://apache.googlesource.com/couchdb-helm/+/refs/heads/main/couchdb/values.yaml

helm repo add couchdb https://apache.github.io/couchdb-helm &&\
helm repo update &&\
helm install \
 --namespace ${BUDIBASE_NS} \
 --set couchdbConfig.couchdb.uuid=$(curl https://www.uuidgenerator.net/api/version4 2>/dev/null | tr -d -) \
 --set adminUsername=${COUCH_DB_USER} \
 --set adminPassword=${COUCH_DB_PASSWORD} \
  budibase couchdb/couchdb

# ------------
# install krew
# ------------
# install krew for kubectl

(
 set -x; cd "$(mktemp -d)" &&
 OS="$(uname | tr '[:upper:]' '[:lower:]')" &&
 ARCH="$(uname -m | sed -e 's/x86_64/amd64/' -e 's/\(arm\)\(64\)\?.*/\1\2/' -e 's/aarch64$/arm64/')" &&
 curl -fsSLO "https://github.com/kubernetes-sigs/krew/releases/latest/download/krew.tar.gz" &&
 tar zxvf krew.tar.gz &&
 KREW=./krew-"${OS}_${ARCH}" &&
 "$KREW" install krew
)

export PATH="${KREW_ROOT:-$HOME/.krew}/bin:$PATH"

# ----------------------
# install minio-operator
# ----------------------
kubectl krew install minio &&\
kubectl minio init &&\
kubectl minio tenant \
 create minio-tenant-1 \
  --servers 4 \
  --volumes 4 \
  --capacity 100M \
  --storage-class standard

# -------------
# install minio
# -------------

BUDIBASE_NS=${BUDIBASE_NS} \
MINIO_ACCESS_KEY=$(echo -n ${MINIO_ACCESS_KEY} | base64) \
MINIO_SECRET_KEY=$(echo -n ${MINIO_SECRET_KEY} | base64) \
 envsubst < budibase-minio-tenant.yaml | \
  kubectl apply \
   --namespace ${BUDIBASE_NS} -f -

# ----------------
# install budibase
# ----------------

kubectl kustomize kubernetes | \
 kubectl \
  --namespace ${BUDIBASE_NS} \
   apply -f -

# ---------------------
# create traefik routes
# ---------------------

kubectl apply -n budibase  -f - <<EOF
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: couchdb
  annotations:
    kubernetes.io/ingress.class: traefik
spec:
  rules:
    - host: couchdb.example.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: budibase-couchdb
                port:
                  number: 5984
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: minio
  annotations:
    kubernetes.io/ingress.class: traefik
spec:
  rules:
    - host: minio.example.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: budibase-minio-hl
                port:
                  number: 9000
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: budibase
  annotations:
    kubernetes.io/ingress.class: traefik
spec:
  rules:
    - host: www.example.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: service/budibase-app
                port:
                  number: 4002

EOF

